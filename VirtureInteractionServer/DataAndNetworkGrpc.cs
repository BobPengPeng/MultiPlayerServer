// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: DataAndNetwork.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace DataAndNetwork {
  public static partial class NetWork
  {
    static readonly string __ServiceName = "DataAndNetwork.NetWork";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::DataAndNetwork.GrpcAction> __Marshaller_DataAndNetwork_GrpcAction = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DataAndNetwork.GrpcAction.Parser));
    static readonly grpc::Marshaller<global::DataAndNetwork.GrpcFeedMsg> __Marshaller_DataAndNetwork_GrpcFeedMsg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DataAndNetwork.GrpcFeedMsg.Parser));
    static readonly grpc::Marshaller<global::DataAndNetwork.BroadCastMsg> __Marshaller_DataAndNetwork_BroadCastMsg = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DataAndNetwork.BroadCastMsg.Parser));
    static readonly grpc::Marshaller<global::DataAndNetwork.BodyTrans> __Marshaller_DataAndNetwork_BodyTrans = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DataAndNetwork.BodyTrans.Parser));
    static readonly grpc::Marshaller<global::DataAndNetwork.BodyTransList> __Marshaller_DataAndNetwork_BodyTransList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DataAndNetwork.BodyTransList.Parser));

    static readonly grpc::Method<global::DataAndNetwork.GrpcAction, global::DataAndNetwork.GrpcFeedMsg> __Method_TransAction = new grpc::Method<global::DataAndNetwork.GrpcAction, global::DataAndNetwork.GrpcFeedMsg>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TransAction",
        __Marshaller_DataAndNetwork_GrpcAction,
        __Marshaller_DataAndNetwork_GrpcFeedMsg);

    static readonly grpc::Method<global::DataAndNetwork.GrpcAction, global::DataAndNetwork.BroadCastMsg> __Method_GetBoradCast = new grpc::Method<global::DataAndNetwork.GrpcAction, global::DataAndNetwork.BroadCastMsg>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetBoradCast",
        __Marshaller_DataAndNetwork_GrpcAction,
        __Marshaller_DataAndNetwork_BroadCastMsg);

    static readonly grpc::Method<global::DataAndNetwork.BodyTrans, global::DataAndNetwork.GrpcFeedMsg> __Method_ServerGetBodyTrans = new grpc::Method<global::DataAndNetwork.BodyTrans, global::DataAndNetwork.GrpcFeedMsg>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "ServerGetBodyTrans",
        __Marshaller_DataAndNetwork_BodyTrans,
        __Marshaller_DataAndNetwork_GrpcFeedMsg);

    static readonly grpc::Method<global::DataAndNetwork.GrpcAction, global::DataAndNetwork.BodyTrans> __Method_ClientGetBodyTrans = new grpc::Method<global::DataAndNetwork.GrpcAction, global::DataAndNetwork.BodyTrans>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ClientGetBodyTrans",
        __Marshaller_DataAndNetwork_GrpcAction,
        __Marshaller_DataAndNetwork_BodyTrans);

    static readonly grpc::Method<global::DataAndNetwork.GrpcAction, global::DataAndNetwork.BodyTransList> __Method_ClientGetTransList = new grpc::Method<global::DataAndNetwork.GrpcAction, global::DataAndNetwork.BodyTransList>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ClientGetTransList",
        __Marshaller_DataAndNetwork_GrpcAction,
        __Marshaller_DataAndNetwork_BodyTransList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::DataAndNetwork.DataAndNetworkReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of NetWork</summary>
    [grpc::BindServiceMethod(typeof(NetWork), "BindService")]
    public abstract partial class NetWorkBase
    {
      public virtual global::System.Threading.Tasks.Task<global::DataAndNetwork.GrpcFeedMsg> TransAction(global::DataAndNetwork.GrpcAction request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetBoradCast(global::DataAndNetwork.GrpcAction request, grpc::IServerStreamWriter<global::DataAndNetwork.BroadCastMsg> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::DataAndNetwork.GrpcFeedMsg> ServerGetBodyTrans(grpc::IAsyncStreamReader<global::DataAndNetwork.BodyTrans> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task ClientGetBodyTrans(global::DataAndNetwork.GrpcAction request, grpc::IServerStreamWriter<global::DataAndNetwork.BodyTrans> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task ClientGetTransList(global::DataAndNetwork.GrpcAction request, grpc::IServerStreamWriter<global::DataAndNetwork.BodyTransList> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for NetWork</summary>
    public partial class NetWorkClient : grpc::ClientBase<NetWorkClient>
    {
      /// <summary>Creates a new client for NetWork</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public NetWorkClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for NetWork that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public NetWorkClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected NetWorkClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected NetWorkClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::DataAndNetwork.GrpcFeedMsg TransAction(global::DataAndNetwork.GrpcAction request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransAction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::DataAndNetwork.GrpcFeedMsg TransAction(global::DataAndNetwork.GrpcAction request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TransAction, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::DataAndNetwork.GrpcFeedMsg> TransActionAsync(global::DataAndNetwork.GrpcAction request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransActionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::DataAndNetwork.GrpcFeedMsg> TransActionAsync(global::DataAndNetwork.GrpcAction request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TransAction, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::DataAndNetwork.BroadCastMsg> GetBoradCast(global::DataAndNetwork.GrpcAction request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBoradCast(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::DataAndNetwork.BroadCastMsg> GetBoradCast(global::DataAndNetwork.GrpcAction request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetBoradCast, null, options, request);
      }
      public virtual grpc::AsyncClientStreamingCall<global::DataAndNetwork.BodyTrans, global::DataAndNetwork.GrpcFeedMsg> ServerGetBodyTrans(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerGetBodyTrans(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::DataAndNetwork.BodyTrans, global::DataAndNetwork.GrpcFeedMsg> ServerGetBodyTrans(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_ServerGetBodyTrans, null, options);
      }
      public virtual grpc::AsyncServerStreamingCall<global::DataAndNetwork.BodyTrans> ClientGetBodyTrans(global::DataAndNetwork.GrpcAction request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClientGetBodyTrans(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::DataAndNetwork.BodyTrans> ClientGetBodyTrans(global::DataAndNetwork.GrpcAction request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ClientGetBodyTrans, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::DataAndNetwork.BodyTransList> ClientGetTransList(global::DataAndNetwork.GrpcAction request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClientGetTransList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::DataAndNetwork.BodyTransList> ClientGetTransList(global::DataAndNetwork.GrpcAction request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ClientGetTransList, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override NetWorkClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new NetWorkClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(NetWorkBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_TransAction, serviceImpl.TransAction)
          .AddMethod(__Method_GetBoradCast, serviceImpl.GetBoradCast)
          .AddMethod(__Method_ServerGetBodyTrans, serviceImpl.ServerGetBodyTrans)
          .AddMethod(__Method_ClientGetBodyTrans, serviceImpl.ClientGetBodyTrans)
          .AddMethod(__Method_ClientGetTransList, serviceImpl.ClientGetTransList).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, NetWorkBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_TransAction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DataAndNetwork.GrpcAction, global::DataAndNetwork.GrpcFeedMsg>(serviceImpl.TransAction));
      serviceBinder.AddMethod(__Method_GetBoradCast, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::DataAndNetwork.GrpcAction, global::DataAndNetwork.BroadCastMsg>(serviceImpl.GetBoradCast));
      serviceBinder.AddMethod(__Method_ServerGetBodyTrans, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::DataAndNetwork.BodyTrans, global::DataAndNetwork.GrpcFeedMsg>(serviceImpl.ServerGetBodyTrans));
      serviceBinder.AddMethod(__Method_ClientGetBodyTrans, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::DataAndNetwork.GrpcAction, global::DataAndNetwork.BodyTrans>(serviceImpl.ClientGetBodyTrans));
      serviceBinder.AddMethod(__Method_ClientGetTransList, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::DataAndNetwork.GrpcAction, global::DataAndNetwork.BodyTransList>(serviceImpl.ClientGetTransList));
    }

  }
}
#endregion
